#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import json
import requests
import base64
import time
from typing import Dict, Any, Optional, List, Union
from io import BytesIO
import tempfile

import cv2
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_FEATHER_TOKEN")
if not TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram Bot API. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_FEATHER_TOKEN.")
    sys.exit(1)

# URL Telegram Bot API
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞ (API –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
FACE_ANALYZER_URL = "http://localhost:5000/analyze"  # gunicorn —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5000

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
HELP_MESSAGE = """
ü§ñ *–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –ë–æ—Ç*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é, –ø—Ä–∏—á–µ—Å–∫–∞–º –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º.

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –±–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É
‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –≤–æ–ª–æ—Å—ã –æ—Ç –ª–∏—Ü–∞
‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
"""

INFO_MESSAGE = """
üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –ª–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MediaPipe –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 468 –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –ª–∏—Ü–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –ª–∏—Ü–∞
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç 7 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ä–º –ª–∏—Ü–∞ (–æ–≤–∞–ª—å–Ω–æ–µ, –∫—Ä—É–≥–ª–æ–µ, –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ, —Å–µ—Ä–¥—Ü–µ–≤–∏–¥–Ω–æ–µ, —Ä–æ–º–±–æ–≤–∏–¥–Ω–æ–µ, –ø—Ä–æ–¥–æ–ª–≥–æ–≤–∞—Ç–æ–µ, —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ)
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é

–í–µ—Ä—Å–∏—è: 1.1.0
–°–æ–∑–¥–∞–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Replit
"""

START_MESSAGE = """
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞.*

–Ø –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º, –º–∞–∫–∏—è–∂—É –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–æ–≤–µ–¥—É –∞–Ω–∞–ª–∏–∑. –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ –ª–∏—Ü–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ, —Å–≤–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π, –∞ –≤–æ–ª–æ—Å—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –∫–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""

WAIT_MESSAGE = "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."

ERROR_MESSAGE = """
üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
‚Ä¢ –ù–∞ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Ç–µ–Ω–µ–π
‚Ä¢ –õ–∏—Ü–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –≤–æ–ª–æ—Å–∞–º–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.
"""

def send_message(chat_id: Union[int, str], text: str, parse_mode: str = "Markdown") -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    url = f"{API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    response = requests.post(url, json=payload)
    return response.json()

def send_photo(chat_id: Union[int, str], photo, caption: str = None) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    url = f"{API_URL}/sendPhoto"
    
    files = None
    data = {"chat_id": chat_id}
    
    if caption:
        data["caption"] = caption
    
    try:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if isinstance(photo, str) and os.path.isfile(photo):
            files = {"photo": open(photo, "rb")}
            response = requests.post(url, data=data, files=files)
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ –±–∞–π—Ç—ã
        elif isinstance(photo, bytes):
            photo_io = BytesIO(photo)
            files = {"photo": ("photo.jpg", photo_io, "image/jpeg")}
            response = requests.post(url, data=data, files=files)
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ BytesIO
        elif isinstance(photo, BytesIO):
            photo.seek(0)
            files = {"photo": ("photo.jpg", photo, "image/jpeg")}
            response = requests.post(url, data=data, files=files)
        # –ï—Å–ª–∏ —ç—Ç–æ URL –∏–ª–∏ file_id
        else:
            data["photo"] = photo
            response = requests.post(url, data=data)
        
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        return {"ok": False, "error": str(e)}

def get_file_path(file_id: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Telegram."""
    url = f"{API_URL}/getFile"
    response = requests.get(url, params={"file_id": file_id})
    result = response.json()
    
    if result.get("ok") and "result" in result:
        return result["result"]["file_path"]
    return None

def download_file(file_path: str) -> Optional[bytes]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram."""
    url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.content
    return None

def process_photo(file_id: str, chat_id: Union[int, str]) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = get_file_path(file_id)
        if not file_path:
            send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        photo_data = download_file(file_path)
        if not photo_data:
            send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –∞–Ω–∞–ª–∏–∑
        send_message(chat_id, WAIT_MESSAGE)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        nparr = np.frombuffer(photo_data, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            temp_file_path = temp_file.name
            temp_file.write(photo_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ –Ω–∞—à–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        with open(temp_file_path, 'rb') as f:
            files = {'image': f}
            data = {'telegram_chat_id': str(chat_id)}
            response = requests.post(FACE_ANALYZER_URL, files=files, data=data)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code == 200:
            result = response.json()
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ API –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ª–∏—Ü–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram API
            # –¢–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # –ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
            if not result.get('telegram_message_sent', False):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API, –æ—Ç–ø—Ä–∞–≤–∏–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                basic_result = (
                    f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞*\n\n"
                    f"üë§ *–§–æ—Ä–º–∞ –ª–∏—Ü–∞*: {result['face_shape'].upper()}\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {result['description']}\n\n"
                    f"üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å*: {int(result['confidence'] * 100)}%"
                )
                send_message(chat_id, basic_result)
        else:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            send_message(chat_id, ERROR_MESSAGE)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
        send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

def process_update(update: Dict[str, Any]) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ
    if 'message' not in update:
        return
    
    message = update['message']
    chat_id = message['chat']['id']
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if 'text' in message:
        if message['text'] == '/start':
            send_message(chat_id, START_MESSAGE)
        elif message['text'] == '/help':
            send_message(chat_id, HELP_MESSAGE)
        elif message['text'] == '/info':
            send_message(chat_id, INFO_MESSAGE)
        else:
            send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    elif 'photo' in message:
        # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ)
        file_id = message['photo'][-1]['file_id']
        process_photo(file_id, chat_id)

def get_updates(offset: int = 0) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram Bot API."""
    url = f"{API_URL}/getUpdates"
    params = {
        "offset": offset,
        "timeout": 10  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    }
    
    try:
        response = requests.get(url, params=params, timeout=15)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        result = response.json()
        if result.get("ok") and "result" in result:
            return result["result"]
        elif not result.get("ok"):
            logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    
    return []

def set_webhook(webhook_url: str) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞."""
    url = f"{API_URL}/setWebhook"
    params = {"url": webhook_url}
    
    try:
        response = requests.get(url, params=params)
        result = response.json()
        if result.get("ok", False):
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {result}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
    
    return False

def polling_loop() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram."""
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
    try:
        bot_info = requests.get(f"{API_URL}/getMe", timeout=10).json()
        if bot_info.get("ok", False):
            bot_username = bot_info["result"]["username"]
            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API. –ë–æ—Ç @{bot_username} –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {bot_info.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API: {str(e)}")
    
    offset = 0
    consecutive_errors = 0
    max_consecutive_errors = 5
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = get_updates(offset)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            if updates is not None:
                consecutive_errors = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            for update in updates:
                try:
                    process_update(update)
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    offset = update['update_id'] + 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update.get('update_id')}: {str(e)}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
            
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            break
            
        except Exception as e:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            consecutive_errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ä–æ—Å–∞ ({consecutive_errors}/{max_consecutive_errors}): {str(e)}")
            
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
            if consecutive_errors >= max_consecutive_errors:
                logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥. –ü–∞—É–∑–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
                consecutive_errors = 0
            else:
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                time.sleep(5)

if __name__ == "__main__":
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    bot_info = requests.get(f"{API_URL}/getMe").json()
    if bot_info.get("ok", False):
        bot_username = bot_info["result"]["username"]
        logger.info(f"–ë–æ—Ç @{bot_username} –∑–∞–ø—É—â–µ–Ω")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    polling_loop()