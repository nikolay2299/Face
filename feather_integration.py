#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import logging
from typing import Dict, Any, Optional, List, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramBotAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram Bot API —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.token = os.environ.get("BOT_FEATHER_TOKEN")
        if self.token:
            self.api_url = f"https://api.telegram.org/bot{self.token}"
        else:
            logger.warning("–¢–æ–∫–µ–Ω Telegram Bot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            self.api_url = None
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ API –∫–ª–∏–µ–Ω—Ç."""
        return self.token is not None and self.api_url is not None
    
    def send_analysis_result(self, chat_id: str, face_shape: str, 
                          description: str, confidence: float, 
                          image_data: str = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            face_shape: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ (–æ—Ç 0 –¥–æ 1)
            image_data: Base64-–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –ª–∏—Ü–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not self.is_configured():
            logger.error("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞.")
            return {"ok": False, "error": "API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
        message_text = (
            f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞*\n\n"
            f"üë§ *–§–æ—Ä–º–∞ –ª–∏—Ü–∞*: {face_shape.upper()}\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {description}\n\n"
            f"üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å*: {int(confidence * 100)}%"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text_response = requests.post(
                f"{self.api_url}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": message_text,
                    "parse_mode": "Markdown"
                },
                timeout=10
            )
            
            text_result = text_response.json()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if image_data and text_result.get("ok"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å data:image
                if image_data.startswith("data:image"):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ base64 (—É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/jpeg;base64,)
                    import base64
                    from io import BytesIO
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    img_data = image_data.split(',')[1]
                    img_binary = base64.b64decode(img_data)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    img_io = BytesIO(img_binary)
                    img_io.name = 'face_analysis.jpg'
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    files = {"photo": img_io}
                    photo_response = requests.post(
                        f"{self.api_url}/sendPhoto",
                        data={"chat_id": chat_id, "caption": "–ê–Ω–∞–ª–∏–∑ –ª–∏—Ü–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫"},
                        files=files,
                        timeout=10
                    )
                    
                    photo_result = photo_response.json()
                    if not photo_result.get("ok"):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {photo_result}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
            self.send_recommendations(chat_id, face_shape)
            
            return text_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return {"ok": False, "error": str(e)}
    
    def send_recommendations(self, chat_id: str, face_shape: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º –∏ —Å—Ç–∏–ª—é –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            face_shape: –§–æ—Ä–º–∞ –ª–∏—Ü–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not self.is_configured():
            logger.error("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
            return {"ok": False, "error": "API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
        recommendations = self._get_recommendations_for_face_shape(face_shape)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        message_text = (
            f"‚ú® *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {face_shape.upper()} —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞*\n\n"
            f"üíá *–ü—Ä–∏—á–µ—Å–∫–∏*:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º
        for haircut in recommendations.get("haircuts", []):
            message_text += f"‚Ä¢ {haircut}\n"
        
        message_text += "\nüëì *–û—á–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã*:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º
        for accessory in recommendations.get("accessories", []):
            message_text += f"‚Ä¢ {accessory}\n"
        
        message_text += "\nüíÑ *–ú–∞–∫–∏—è–∂*:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–∫–∏—è–∂—É
        for makeup in recommendations.get("makeup", []):
            message_text += f"‚Ä¢ {makeup}\n"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = requests.post(
                f"{self.api_url}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": message_text,
                    "parse_mode": "Markdown"
                },
                timeout=10
            )
            
            return response.json()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            return {"ok": False, "error": str(e)}
    
    def _get_recommendations_for_face_shape(self, face_shape: str) -> Dict[str, List[str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞.
        
        Args:
            face_shape: –§–æ—Ä–º–∞ –ª–∏—Ü–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        recommendations = {
            "oval": {
                "haircuts": [
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ –∏ –¥–ª–∏–Ω–∞ –≤–æ–ª–æ—Å",
                    "–î–ª–∏–Ω–Ω—ã–µ –≤–æ–ª–æ—Å—ã —Å –ª–µ–≥–∫–∏–º–∏ –≤–æ–ª–Ω–∞–º–∏",
                    "–ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ —Ç–∏–ø–∞ –ø–∏–∫—Å–∏",
                    "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º–∏ —Å—Ç—Ä–∏–∂–∫–∞–º–∏"
                ],
                "accessories": [
                    "–ü–æ–¥—Ö–æ–¥—è—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±—ã–µ —Ñ–æ—Ä–º—ã –æ—á–∫–æ–≤",
                    "–ö—Ä—É–≥–ª—ã–µ, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∏–ª–∏ –∫–æ—à–∞—á—å–∏ –æ—á–∫–∏",
                    "–°–µ—Ä—å–≥–∏ –ª—é–±–æ–π —Ñ–æ—Ä–º—ã –∏ —Ä–∞–∑–º–µ—Ä–∞"
                ],
                "makeup": [
                    "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–≥–∫–æ–µ –∫–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "–í—ã–¥–µ–ª—è–π—Ç–µ –≥–ª–∞–∑–∞ –∏–ª–∏ –≥—É–±—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é",
                    "–†—É–º—è–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç–µ –Ω–∞ —è–±–ª–æ—á–∫–∏ —â–µ–∫"
                ]
            },
            "round": {
                "haircuts": [
                    "–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —É–¥–ª–∏–Ω–µ–Ω–∏—è –ª–∏—Ü–∞",
                    "–î–ª–∏–Ω–Ω—ã–µ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏",
                    "–ü—Ä—è–º—ã–µ –∏–ª–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–µ –≤–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞",
                    "–ò–∑–±–µ–≥–∞–π—Ç–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –ø—ã—à–Ω—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫"
                ],
                "accessories": [
                    "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –æ—á–∫–∏",
                    "–ò–∑–±–µ–≥–∞–π—Ç–µ –∫—Ä—É–≥–ª—ã—Ö –æ–ø—Ä–∞–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –æ–∫—Ä—É–≥–ª–æ—Å—Ç—å",
                    "–î–ª–∏–Ω–Ω—ã–µ —Å–µ—Ä—å–≥–∏, –≤–∏–∑—É–∞–ª—å–Ω–æ —É–¥–ª–∏–Ω—è—é—â–∏–µ –ª–∏—Ü–æ"
                ],
                "makeup": [
                    "–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—É–ª –¥–ª—è –ø—Ä–∏–¥–∞–Ω–∏—è –∏–º –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã",
                    "–£–¥–ª–∏–Ω—è—é—â–µ–µ –∫–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ª–∏–Ω–∏–∏ —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å –∏ –ø–æ–¥ —Å–∫—É–ª–∞–º–∏",
                    "–†—É–º—è–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç–µ –Ω–∏–∂–µ —Å–∫—É–ª, –∞ –Ω–µ –Ω–∞ —è–±–ª–æ—á–∫–∏ —â–µ–∫"
                ]
            },
            "square": {
                "haircuts": [
                    "–ú—è–≥–∫–∏–µ –≤–æ–ª–Ω—ã –∏ –∫—É–¥—Ä–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è —É–≥–ª–æ–≤",
                    "–î–ª–∏–Ω–Ω–∞—è —á–µ–ª–∫–∞ –Ω–∞–±–æ–∫",
                    "–û–±—ä–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏—Å–∫–æ–≤",
                    "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã"
                ],
                "accessories": [
                    "–ö—Ä—É–≥–ª—ã–µ –∏–ª–∏ –æ–≤–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è —É–≥–ª–æ–≤",
                    "–ò–∑–±–µ–≥–∞–π—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–ø—Ä–∞–≤",
                    "–ö—Ä—É–≥–ª—ã–µ —Å–µ—Ä—å–≥–∏ –∏–ª–∏ —Å–µ—Ä—å–≥–∏ —Å –º—è–≥–∫–∏–º–∏ –∏–∑–≥–∏–±–∞–º–∏"
                ],
                "makeup": [
                    "–°–º—è–≥—á–∞—é—â–µ–µ –∫–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≥–ª–æ–≤ —á–µ–ª—é—Å—Ç–∏",
                    "–†—É–º—è–Ω–∞ –Ω–∞ —è–±–ª–æ—á–∫–∞—Ö —â–µ–∫ –¥–ª—è –ø—Ä–∏–¥–∞–Ω–∏—è –º—è–≥–∫–æ—Å—Ç–∏",
                    "–û–∫—Ä—É–≥–ª—ã–µ —Ñ–æ—Ä–º—ã –≤ –º–∞–∫–∏—è–∂–µ –±—Ä–æ–≤–µ–π"
                ]
            },
            "heart": {
                "haircuts": [
                    "–û–±—ä–µ–º–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ —É—à–µ–π –∏ –Ω–∏–∂–µ",
                    "–ü—Ä–∏—á–µ—Å–∫–∏ —Å –ø—Ä–æ–±–æ—Ä–æ–º –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ",
                    "–£–¥–ª–∏–Ω–µ–Ω–Ω—ã–π –±–æ–± –∏–ª–∏ –ª–æ–± –¥–ª–∏–Ω–æ–π –¥–æ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞",
                    "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –ª–∏—Ü–∞"
                ],
                "accessories": [
                    "–û—á–∫–∏ –Ω–∏–∂–Ω–µ–π –æ–ø—Ä–∞–≤–æ–π –∏–ª–∏ –±–µ–∑ –æ–ø—Ä–∞–≤—ã",
                    "–û—á–∫–∏ –∫–æ—à–∞—á–∏–π –≥–ª–∞–∑, —Å–±–∞–ª–∞–Ω—Å–∏—Ä—É—é—Ç –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç–∏ –ª–∏—Ü–∞",
                    "–û–±—ä–µ–º–Ω—ã–µ —Å–µ—Ä—å–≥–∏, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Ü–∞"
                ],
                "makeup": [
                    "–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏—Å–∫–æ–≤ –∏ –ª–±–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—É–∂–µ–Ω–∏—è",
                    "–•–∞–π–ª–∞–π—Ç–µ—Ä –Ω–∞ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
                    "–†—É–º—è–Ω–∞ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ —â–µ–∫"
                ]
            },
            "diamond": {
                "haircuts": [
                    "–ü—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞",
                    "–î–ª–∏–Ω–Ω—ã–µ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏",
                    "–ß–µ–ª–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –ª–±–∞",
                    "–ë–æ–± —Å —É–¥–ª–∏–Ω–µ–Ω–∏–µ–º –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É"
                ],
                "accessories": [
                    "–û—á–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏ –∏–ª–∏ –æ–≤–∞–ª—å–Ω—ã–µ",
                    "–û—á–∫–∏ —Å –≤–µ—Ä—Ö–Ω–µ–π –æ–ø—Ä–∞–≤–æ–π –∏–ª–∏ –±–µ–∑ –æ–ø—Ä–∞–≤—ã",
                    "–û–±—ä–µ–º–Ω—ã–µ —Å–µ—Ä—å–≥–∏, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Ü–∞"
                ],
                "makeup": [
                    "–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—É–ª –¥–ª—è –∏—Ö —Å–º—è–≥—á–µ–Ω–∏—è",
                    "–†—É–º—è–Ω–∞ –Ω–∞ —è–±–ª–æ—á–∫–∞—Ö —â–µ–∫",
                    "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–ª–∞–∑–∞ –∏ –≥—É–±—ã"
                ]
            },
            "oblong": {
                "haircuts": [
                    "–ü—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º –ø–æ –±–æ–∫–∞–º",
                    "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã",
                    "–ü—Ä—è–º–∞—è –∏–ª–∏ –∫–æ—Å–∞—è —á–µ–ª–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–ª–∏–Ω—ã –ª–∏—Ü–∞",
                    "–ò–∑–±–µ–≥–∞–π—Ç–µ —á—Ä–µ–∑–º–µ—Ä–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö –∏ –ø—Ä—è–º—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫"
                ],
                "accessories": [
                    "–®–∏—Ä–æ–∫–∏–µ –æ—á–∫–∏ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏",
                    "–ö—Ä—É–≥–ª—ã–µ –æ—á–∫–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è –≤—ã—Ç—è–Ω—É—Ç–æ—Å—Ç–∏",
                    "–ö–æ—Ä–æ—Ç–∫–∏–µ, –æ–±—ä–µ–º–Ω—ã–µ —Å–µ—Ä—å–≥–∏"
                ],
                "makeup": [
                    "–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–±–∞ –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —É–∫–æ—Ä–æ—á–µ–Ω–∏—è",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—É–º—è–Ω –Ω–∞ —Å–∫—É–ª–∞—Ö –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏",
                    "–®–∏—Ä–æ–∫–∏–µ —Ñ–æ—Ä–º—ã –≤ –º–∞–∫–∏—è–∂–µ –±—Ä–æ–≤–µ–π"
                ]
            },
            "triangle": {
                "haircuts": [
                    "–û–±—ä–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≥–æ–ª–æ–≤—ã –∏ —É –≤–∏—Å–∫–æ–≤",
                    "–ö–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–∏–∂–∫–∏",
                    "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º –Ω–∞ –º–∞–∫—É—à–∫–µ",
                    "–ß–µ–ª–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"
                ],
                "accessories": [
                    "–û—á–∫–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –æ–ø—Ä–∞–≤—ã",
                    "–û–ø—Ä–∞–≤—ã –∫–æ—à–∞—á–∏–π –≥–ª–∞–∑ –∏–ª–∏ –æ—á–∫–∏-–∞–≤–∏–∞—Ç–æ—Ä—ã",
                    "–û–±—ä–µ–º–Ω—ã–µ —Å–µ—Ä—å–≥–∏, –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É—é—â–∏–µ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –ª–∏—Ü–∞"
                ],
                "makeup": [
                    "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–ª–∞–∑–∞ –∏ –±—Ä–æ–≤–∏",
                    "–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ —á–µ–ª—é—Å—Ç–∏ –¥–ª—è –µ—ë –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—É–∂–µ–Ω–∏—è",
                    "–†—É–º—è–Ω–∞ –Ω–∞ —Å–∫—É–ª–∞—Ö –∏ —á—É—Ç—å –≤—ã—à–µ"
                ]
            }
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –æ–≤–∞–ª—å–Ω–æ–≥–æ –ª–∏—Ü–∞
        return recommendations.get(face_shape.lower(), recommendations["oval"])